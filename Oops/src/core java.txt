Simple Program :

	public class HelloWorld{

		public static void main(String args[]){
			System.out.println("Hello...");
		}
	}


public : public is an access modifier that represent visibility. It means it is visible to all.

[Note : 4 type of access modifier we use public, protected, private and default]

class : It is used to declare a class in Java.

static : It is a keyword. If we declare any method as static, it is known as the static method. There is no need to create an object to invoke the static method.

void : void is the return type of the method. It means it doesn't return any value.

main : It represents the starting point of the program.

String args[] : It is used for command line argument. 

System.out.println() : It is used to print statement.




----------------------------------------------------------------

Variable : A variable is a container which holds the value while the program is executed. A variable is assigned with a data type.
Variable is a name of memory location. There are three types of variables in java: local, instance and static.

1. local variable : A variable declared inside the body of the method is called local variable. You can use this variable only within that method and the other methods in the class aren't even aware that the variable exists.

2. instatnce variable : A variable declared inside the class but outside the body of the method, is called an instance variable. It is not declared as static.

3. static variable : A variable that is declared as static is called a static variable. It cannot be local. You can create a single copy of the static variable and share it among all the instances of the class.

public class Employee
{  
    //static variable  
    static String companyName = "Google"; 

    void method()  
    {    
	//local variable 
        int empMobileNo = xxxxxxxxxx;    
    }  
    public static void main(String args[])  
    {  
	//instance variable   
        String empName = "Akash";  
    }  
}



------------------------------------------------------------------------

Data Types : There are two types of data types used in Java:

1. Primitive ,
2. Non primitive data type
	
1. Primitive data type : 
								
boolean (t/f)													
int								
byte
char
short
long
double
float

2. Non primitive

Arrays
Interface
Strings

-----------------------------------------------------------------

Operators : Operator in Java is a symbol that is used to perform operations. For example: +, -, *, / etc.

There are many types of operators in Java which are given below:

Unary Operator, 
Arithmetic Operator,
Shift Operator,
Relational Operator,
Bitwise Operator,
Logical Operator,
Ternary Operator and
Assignment Operator,
Left Shift Operator,
Right Shift Operator.


Logical && and Bitwise & Operator :
The logical && operator doesn't check the second condition if the first condition is false. It checks the second condition only if the first one is true.
System.out.println(a<b&&a<c);//false && true = false  

The bitwise & operator always checks both conditions whether first condition is true or false.
System.out.println(a<b&a<c);//false & true = false  



Logical || and Bitwise |
The logical || operator doesn't check the second condition if the first condition is true. It checks the second condition only if the first one is false.
System.out.println(a>b||a<c);//true || true = true 

The bitwise | operator always checks both conditions whether first condition is true or false.
System.out.println(a>b|a<c);//true | true = true 


Ternary Operator :
Java Ternary operator is used as one line replacement for if-then-else statement and used a lot in Java programming. It is the only conditional operator which takes three operands.
int x = (a < b) ? a : b;  


Left Shift Opeartor :

Right Shift Opeartor :


////////////////////////////////////////////////////////////////////////////

Control Folow :

If(boolean):
If(10 > 2){
	print(this condition id true)
} else{
	print (this condition is not true)
}


Oops (Object Oriented Programming Language) : Oops is a methodology or program to design using classes and objects. It simplify software development and maintanence by providing some concepts : -

1; class
2; object
3; inheritance(IS-A Relationship)
4; polymorphism
5; abstraction
6; encapsulation


Object Creation : we create a object with the help of new keyword.

3 ways to initialize object

1. with the help of reference variable

public class Employee {

	int empId;
	String empName;
	String empCity;
}

public class ABC {
	
	public static void main(String[] args) {

	
		// With the help of Reference variable
		Employee employee = new Employee();
		employee.empId = 5001;
		employee.empName = "Aakash";
		employee.empCity = "Mathura";
		
		System.out.println(employee.empId + " " + employee.empName + " " + employee.empCity);
	}
}



2. with the help of method

public class Employee {

	int empId;
	String empName;
	String empCity;

	// Method
	
	public void display(int id, String name, String city) {		
		empId = id;
		empName = name;
		empCity = city;					
	}

	public void show() {
		System.out.println(empId + " " + empName + " " + empCity);
	}
}

public class ABC {
	
	public static void main(String[] args) {
	
		// With the help of method
		Employee employee = new Employee();

		employee.display(201, "Riya", "Delhi");	
	
		employee.show();

		
	}
}




3. with the help of constructor

public class Employee {

	int empId;
	String empName;
	String empCity;

	// Parameterized Constructor
	
	Employee(int empId, String empName, String empCity){		
		this.empId = empId;
		this.empName = empName;
		this.empCity = empCity;
	}
	
	public void show() {
		System.out.println(empId + " " + empName + " " + empCity);
	}
}

public class ABC {	
	public static void main(String[] args) {
	Employee employee = new Employee(601, "Akash", "Mathura");
	employee.show();
	}
}

Note : Anonymous Object

		// Anonymouse object		
		new Employee();


Different ways to create object:

1. with the help of new keyword
2. with the help newInstance() method
3. with the help of clone() method
4. with the help of factory method

Constructor:

2 type of constructor

1. Default Constructor
2. Parameterized Constructor


Inheritance:- When one object acquire the property of its parent objects that is call Inheritance.
 3 types of inheritance we use

1. Single Level Inheritance
2. Multilevel Inheritance
3. Hireirachal 




Aggregation : A class have an entity refernce that is call Aggregation.

public class Employee {

	int empId;
	String empName;
	String empCity;
	
	// Aggregation
	Address address;
}

public class Address {

	int areaCode;
	String addLine1;
	String addLine2;
	String city;
	String state;
	String country;
}






